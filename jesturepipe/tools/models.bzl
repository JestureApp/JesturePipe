def model_compile(model, name, var_name, namespace = "jesturepipe", output_name = None, xxd_opts = []):
    if output_name == None:
        output_name = name

    native.genrule(
        name = name + "_gen_cc",
        srcs = [model],
        outs = [output_name + ".cc"],
        cmd = " ".join([
            "echo \"// Autogenerated by xxd\" > $@",
            "&& echo \"namespace %s {\" >> $@" % namespace,
            "&& xxd %s -n %s -i $< >> $@" % (" ".join(xxd_opts), var_name),
            "&& echo \"} // namespace %s\" >> $@" % namespace,
            # "&& sed -E 's/unsigned int/const unsigned int/' $@ > $@.tmp",
            # "&& mv $@.tmp $@",
        ]),
    )

    native.genrule(
        name = name + "_gen_h",
        outs = [output_name + ".h"],
        cmd = " ".join([
            "echo \"// Autogenerated\" > $@",
            "&& echo \"#ifndef __H_%s__\" >> $@" % output_name.upper(),
            "&& echo \"#define __H_%s__\" >> $@" % output_name.upper(),
            "&& echo \"namespace %s {\" >> $@" % namespace,
            "&& echo \"extern const unsigned char %s[];\" >> $@" % var_name,
            "&& echo \"extern const int %s_len;\" >> $@" % var_name,
            "&& echo \"} // namespace %s\" >> $@" % namespace,
            "&& echo \"#endif\" >> $@",
        ]),
    )

    native.cc_library(
        name = name,
        srcs = [output_name + ".cc"],
        hdrs = [output_name + ".h"],
    )
